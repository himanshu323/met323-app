{
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 10,
    "pending": 0,
    "failures": 1,
    "start": "2018-10-02T09:19:58.463Z",
    "end": "2018-10-02T09:20:00.841Z",
    "duration": 2378,
    "testsRegistered": 11,
    "passPercent": 90.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "370e038f-6434-4663-94e8-3d31a9c5cc6c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "2ae218a8-c818-4800-965a-aef49889b020",
        "title": "Test the Post Trades routes",
        "fullFile": "/Users/himanshuarora/WebDevelopment/Metallica/met323-app/backend/tests/server-delete.test.js",
        "file": "/backend/tests/server-delete.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "Test the Post Trades routes \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 72,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({}).then(()=>{\n       let userOne= new User(users[0]).save();\n       let userTwo=new User(users[1]).save();\n       Promise.all([userOne,userTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "fd5d732f-d9ac-4506-87ae-90c360d8102c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTrades",
            "fullTitle": "Test the Post Trades routes \"before each\" hook: populateTrades",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Trade.remove({}).then(()=>{\n       let tradeOne= new Trade(trades[0]).save();\n       let tradeTwo=new Trade(trades[1]).save();\n       Promise.all([tradeOne,tradeTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "8be64fbb-7bcc-48ec-a277-25fe8c9fb53d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "delete the trade if user is the owner of the trade and is authenticated",
            "fullTitle": "Test the Post Trades routes delete the trade if user is the owner of the trade and is authenticated",
            "timedOut": true,
            "duration": 2007,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request(app).delete(\"/api/trades/\"+trades[0]._id)\n            .set(\"Authorization\",\"Bearer \"+ userTokens[0].token)\n            .expect(200)\n            .expect(resp=>{\n                \n            })",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/himanshuarora/WebDevelopment/Metallica/met323-app/backend/tests/server-delete.test.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/himanshuarora/WebDevelopment/Metallica/met323-app/backend/tests/server-delete.test.js)"
            },
            "isRoot": false,
            "uuid": "e5e3a7f5-0886-4b3c-9487-6e43cbd180a9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "e5e3a7f5-0886-4b3c-9487-6e43cbd180a9"
        ],
        "pending": [],
        "skipped": [],
        "duration": 2007,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2fe0de4b-ceb3-4271-a58a-361f4c1b15f6",
        "title": "Test the Get Trades routes",
        "fullFile": "/Users/himanshuarora/WebDevelopment/Metallica/met323-app/backend/tests/server-get.test.js",
        "file": "/backend/tests/server-get.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "Test the Get Trades routes \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({}).then(()=>{\n       let userOne= new User(users[0]).save();\n       let userTwo=new User(users[1]).save();\n       Promise.all([userOne,userTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "492bc335-c096-4049-86ed-c3064781692e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTrades",
            "fullTitle": "Test the Get Trades routes \"before each\" hook: populateTrades",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Trade.remove({}).then(()=>{\n       let tradeOne= new Trade(trades[0]).save();\n       let tradeTwo=new Trade(trades[1]).save();\n       Promise.all([tradeOne,tradeTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "7832abdb-81ae-4023-9685-ff29e23e6933",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should fetch all the trades from the db",
            "fullTitle": "Test the Get Trades routes should fetch all the trades from the db",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app).get(\"/api/trades\")\n            .expect(200)\n            .expect(resp=>{\n                expect(resp.body.trades.length).toBe(2);\n                expect(resp.body.trades[0]._id).toBe(trades[0]._id.toHexString());\n                expect(resp.body.trades[1]._id).toBe(trades[1]._id.toHexString())\n                \n            })\n            .end(done);",
            "err": {},
            "isRoot": false,
            "uuid": "5ce20400-b2c4-4070-bdbd-b69c0fd3cf60",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should fetch the trade if valid Trade Id is provided",
            "fullTitle": "Test the Get Trades routes should fetch the trade if valid Trade Id is provided",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app).get(\"/api/trades/\"+trades[1]._id.toHexString())\n            .expect(200)\n            .expect(resp=>{\n                expect(resp.body._id).toBe(trades[1]._id.toHexString());\n            })\n            .end(done);",
            "err": {},
            "isRoot": false,
            "uuid": "3a028ac7-fbb0-41e6-834d-2ee3d1913473",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not fetch the trade if Trade Id is not found in db",
            "fullTitle": "Test the Get Trades routes should not fetch the trade if Trade Id is not found in db",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app).get(\"/api/trades/\"+new ObjectID().toHexString())\n            .expect(404)\n            .expect(resp=>{\n                expect(resp.body.message).toBe(\"Trade not found\");\n            })\n            .end(done);",
            "err": {},
            "isRoot": false,
            "uuid": "077c6b19-448d-4c33-bf5c-a8b1cc1b258e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not fetch the trade if invalid Trade Id is provided",
            "fullTitle": "Test the Get Trades routes should not fetch the trade if invalid Trade Id is provided",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(app).get(\"/api/trades/789jhjkhk\")\n            .expect(500)\n            .expect(resp=>{\n                expect(resp.body.message).toBe(\"Trade fetch failed\");\n            })\n            .end(done);",
            "err": {},
            "isRoot": false,
            "uuid": "ee9e9260-556b-4303-8d44-bc2bbfcf475c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5ce20400-b2c4-4070-bdbd-b69c0fd3cf60",
          "3a028ac7-fbb0-41e6-834d-2ee3d1913473",
          "077c6b19-448d-4c33-bf5c-a8b1cc1b258e",
          "ee9e9260-556b-4303-8d44-bc2bbfcf475c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 49,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bade90ac-3c0b-4543-bf81-f4e37393e695",
        "title": "Test the Post Trades routes",
        "fullFile": "/Users/himanshuarora/WebDevelopment/Metallica/met323-app/backend/tests/server-post.test.js",
        "file": "/backend/tests/server-post.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "Test the Post Trades routes \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({}).then(()=>{\n       let userOne= new User(users[0]).save();\n       let userTwo=new User(users[1]).save();\n       Promise.all([userOne,userTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "6759d254-0692-4001-9c66-1f4213bfd660",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTrades",
            "fullTitle": "Test the Post Trades routes \"before each\" hook: populateTrades",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Trade.remove({}).then(()=>{\n       let tradeOne= new Trade(trades[0]).save();\n       let tradeTwo=new Trade(trades[1]).save();\n       Promise.all([tradeOne,tradeTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "d1b8fdf0-9712-4c57-9bfa-c62489e0d6a0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should be able to save the trade when user submits valid trade and is authenticated",
            "fullTitle": "Test the Post Trades routes should be able to save the trade when user submits valid trade and is authenticated",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let trade={\n                _id:new ObjectID().toString(),\n            \n                tradeDate:new Date(new Date().getTime() + 5*24*60*60*1000),\n                commodity:\"AL\",\n                side: \"Buy\",\n                 quantity:150,\n                 price:2000,\n                 tradeId:null,\n            \n                counterparty: \"Loreum\",\n                location: \"India\",\n                creator:null\n            \n            }\n            request(app).post(\"/api/trades\")\n            .set(\"Authorization\",\"Bearer \"+ userTokens[0].token)\n            .send(trade)\n            .expect(201)\n            .expect(resp=>{\n                //console.log(resp);\n                \n                expect(resp.body.message).toBe(\"Trade added successfully\")\n            })\n            .end((error,resp)=>{\n                if(error){\n                   return done(error);\n                }\n                Trade.find({tradeDate:trade.tradeDate}).then(resp=>{\n                    expect(resp.length).toBe(1);\n                  \n                    expect(resp[0].creator).toEqual(users[0]._id);\n                    done();\n                }).catch(err=>{\n                    return done(err);\n                })\n            })",
            "err": {},
            "isRoot": false,
            "uuid": "71dae60c-2642-4909-8689-fb45a95439ca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to save the trade when user is not authenticated",
            "fullTitle": "Test the Post Trades routes should not be able to save the trade when user is not authenticated",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let trade={\n                    _id:new ObjectID().toString(),\n                \n                    tradeDate:new Date(new Date().getTime() + 5*24*60*60*1000),\n                    commodity:\"AL\",\n                    side: \"Buy\",\n                     quantity:150,\n                     price:2000,\n                     tradeId:null,\n                \n                    counterparty: \"Loreum\",\n                    location: \"India\",\n                    creator:null\n                \n                }\n                request(app).post(\"/api/trades\")\n                .set(\"Authorization\",\"Bearer \"+ \"w878978jhjkd\")\n                .send(trade)\n                .expect(401)\n                .expect(resp=>{\n                    //console.log(resp);\n                    \n    \n                    expect(resp.body.message).toBe(\"You are not authenticated\")\n                })\n                .end(done)",
            "err": {},
            "isRoot": false,
            "uuid": "1bd04502-1e13-436b-b0fd-5f03669ae460",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to save the trade when users submits invalid data ",
            "fullTitle": "Test the Post Trades routes should not be able to save the trade when users submits invalid data ",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let trade={\n                   \n                \n                }\n                request(app).post(\"/api/trades\")\n                .set(\"Authorization\",\"Bearer \"+ userTokens[0].token)\n                .send(trade)\n                .expect(500)\n                .expect(resp=>{\n                    //console.log(resp);\n                    \n    \n                    expect(resp.body.message).toBe(\"Trade Add Failed\")\n                })\n                .end(done)",
            "err": {},
            "isRoot": false,
            "uuid": "d3eec873-f517-42bb-ba05-c065d6cb3eb5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "71dae60c-2642-4909-8689-fb45a95439ca",
          "1bd04502-1e13-436b-b0fd-5f03669ae460",
          "d3eec873-f517-42bb-ba05-c065d6cb3eb5"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 39,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "278703f3-34aa-4f1d-b654-fedda7882150",
        "title": "Test the Put Trades routes",
        "fullFile": "/Users/himanshuarora/WebDevelopment/Metallica/met323-app/backend/tests/server-put.test.js",
        "file": "/backend/tests/server-put.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "Test the Put Trades routes \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({}).then(()=>{\n       let userOne= new User(users[0]).save();\n       let userTwo=new User(users[1]).save();\n       Promise.all([userOne,userTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "d9f3df27-9aa6-44be-83d7-d65f7d93076e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTrades",
            "fullTitle": "Test the Put Trades routes \"before each\" hook: populateTrades",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Trade.remove({}).then(()=>{\n       let tradeOne= new Trade(trades[0]).save();\n       let tradeTwo=new Trade(trades[1]).save();\n       Promise.all([tradeOne,tradeTwo]).then(()=>{\n           done();\n       })\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "501a65bb-f2fc-49e9-88e0-53883a798db5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should be able to update the trade when user is the owner of the trade and is authenticated",
            "fullTitle": "Test the Put Trades routes should be able to update the trade when user is the owner of the trade and is authenticated",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "trades[1].quantity=1000;\n            trades[1].price=5000;\n            request(app).put(\"/api/trades/\"+ trades[1]._id.toHexString())\n            .set(\"Authorization\",\"Bearer \"+ userTokens[1].token)\n            .send(trades[1])\n            .expect(201)\n            .expect(resp=>{\n                \n                expect(resp.body.message).toBe(\"Updated successfully\")\n            })\n            .end((error,resp)=>{\n                if(error){\n                   return done(error);\n                }\n                Trade.findById(trades[1]._id).then(resp=>{\n                    expect(resp).toBeTruthy();\n                  \n                    expect(resp._id).toEqual(trades[1]._id);\n                    expect(resp.quantity).toBe(1000);\n                    expect(resp.price).toBe(5000);\n                    done();\n                }).catch(err=>{\n                    return done(err);\n                })\n            })",
            "err": {},
            "isRoot": false,
            "uuid": "41af4e18-0d96-4820-8aa5-4112e7aab63a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to update the trade when user is not the owner of the trade and is authenticated",
            "fullTitle": "Test the Put Trades routes should not be able to update the trade when user is not the owner of the trade and is authenticated",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "trades[0].quantity=1000;\n            trades[0].price=5000;\n            request(app).put(\"/api/trades/\"+ trades[0]._id.toHexString())\n            .set(\"Authorization\",\"Bearer \"+ userTokens[1].token)\n            .send(trades[0])\n            .expect(400)\n            .expect(resp=>{\n                \n                expect(resp.body.message).toBe(\"Unable to update\")\n            })\n            .end(done);",
            "err": {},
            "isRoot": false,
            "uuid": "8110f24e-3bf4-44b5-bbb6-b2ed3fd0faa5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not be able to update the trade when user is  the owner of the trade but is not authenticated",
            "fullTitle": "Test the Put Trades routes should not be able to update the trade when user is  the owner of the trade but is not authenticated",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "trades[0].quantity=1000;\n            trades[0].price=5000;\n            request(app).put(\"/api/trades/\"+ trades[0]._id.toHexString())\n            .set(\"Authorization\",\"Bearer \")\n            .send(trades[0])\n            .expect(401)\n            .expect(resp=>{\n                \n                expect(resp.body.message).toBe(\"You are not authenticated\")\n            })\n            .end(done);",
            "err": {},
            "isRoot": false,
            "uuid": "42211f91-d0de-4004-8bc6-40b8c37822fc",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "41af4e18-0d96-4820-8aa5-4112e7aab63a",
          "8110f24e-3bf4-44b5-bbb6-b2ed3fd0faa5",
          "42211f91-d0de-4004-8bc6-40b8c37822fc"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 31,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}